---
import BackgroundEffect from "../components/icons/BackgroundEffect.astro";
import Nav from "../components/Nav.astro";
import Landing from "../components/Landing.astro";
import Layout from "../layouts/Layout.astro";
import "../styles/global.css";
---

<Layout>
	<div class="overflow-hidden relative w-full h-full object-cover">
		<div class="app flex flex-col max-w-[790px] max-h-svh mx-auto">
			<Landing />
			<Nav />
		</div>
		<BackgroundEffect className="background-effect-hexagon" />
		<div class="background-effect">
			<span id="background-ball" class="background-effect-ball"></span>
			<span id="background-ball2" class="background-effect-ball"></span>
		</div>
	</div>
	<script type="module" is:inline>
		// Codeblock
		import hljs from "https://cdn.jsdelivr.net/npm/highlight.js@11.9.0/+esm";

		window.addEventListener("DOMContentLoaded", () => {
			hljs.highlightAll();
		});

		//Typing effect
		const codeBlockMobile = document.querySelector(".codeBlock-mobile");
		const codeBlockDesktop = document.querySelector(".codeBlock-desktop");
		const observerMobile = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						codeBlockMobile.classList.add("visible");
						observerMobile.unobserve(entry.target);
					}
				});
			},
			{
				threshold: 0.9,
			},
		);
		const observerDesktop = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						codeBlockDesktop.classList.add("visible");
						observerDesktop.unobserve(entry.target);
					}
				});
			},
			{
				threshold: 0.9,
			},
		);
		if (codeBlockMobile) observerMobile.observe(codeBlockMobile);
		if (codeBlockDesktop) observerDesktop.observe(codeBlockDesktop);

		//background effect
		const ball = document.getElementById("background-ball");
		const ball2 = document.getElementById("background-ball2");
		ball.style.transform = `translateY(400px) translateX(600px)`;
		ball2.style.transform = `translateY(100px) translateX(700px)`;
		setInterval(() => {
			const randomY = Math.floor(Math.random() * 1000);
			const randomX = Math.floor(Math.random() * 700);
			ball.style.transform = `translateY(${randomY}px) translateX(${randomX}px)`;

			const randomY2 = Math.floor(Math.random() * 1000);
			const randomX2 = Math.floor(Math.random() * 500) + 900;
			ball2.style.transform = `translateY(${randomY2}px) translateX(${randomX2}px)`;
		}, 2000);
		//Resend (email service)
		document
			.getElementById("contact-form")
			.addEventListener("submit", async (e) => {
				e.preventDefault();
				const form = new FormData(e.target);
				const name = form.get("name");
				const email = form.get("email");
				const message = form.get("message");
				const successColor = "text-green-400";
				const errorColor = "text-pink-400";

				const notificationDiv =
					document.getElementById("form-notification");

				// Default text and color
				notificationDiv.classList.remove(successColor);
				notificationDiv.classList.add(errorColor);
				notificationDiv.textContent = "";

				if (!name || !email || !message) {
					notificationDiv.textContent =
						"> Todos los campos son obligatorios!";
					return;
				}

				const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
				if (!emailRegex.test(email)) {
					notificationDiv.textContent = "> Ingresa un email vÃ¡lido.";
					return;
				}

				const res = await fetch("/api/contact", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({
						name: form.get("name"),
						email: form.get("email"),
						message: form.get("message"),
					}),
				});

				// If there are no errors
				notificationDiv.classList.remove(errorColor);
				notificationDiv.classList.add(successColor);
				notificationDiv.textContent =
					"> Mensaje enviado correctamente! ðŸš€";
			});

		// detect current section
		const secciones = document.querySelectorAll("section");
		const opciones = {
			threshold: 0.4,
		};

		const observer = new IntersectionObserver((entradas) => {
			entradas.forEach((entrada) => {
				const id = entrada.target.getAttribute("id");
				const icono = document.getElementById("icon-" + id);

				if (entrada.isIntersecting) {
					icono.classList.add("current");
				} else {
					icono.classList.remove("current");
				}
			});
		}, opciones);

		secciones.forEach((sec) => observer.observe(sec));
	</script>
</Layout>
